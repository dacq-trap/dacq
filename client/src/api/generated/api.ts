/* tslint:disable */
/* eslint-disable */
/**
 * DacQ API
 * DacQ Score Server API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * コンペティション
 * @export
 * @interface Competition
 */
export interface Competition {
    /**
     * コンペティションID
     * @type {string}
     * @memberof Competition
     */
    'id': string;
    /**
     * コンペティション名
     * @type {string}
     * @memberof Competition
     */
    'name': string;
    /**
     * 
     * @type {User}
     * @memberof Competition
     */
    'author': User;
    /**
     * ルール
     * @type {string}
     * @memberof Competition
     */
    'rule': string;
    /**
     * 学習データファイルID
     * @type {string}
     * @memberof Competition
     */
    'dataId': string;
    /**
     * 学習データの説明
     * @type {string}
     * @memberof Competition
     */
    'dataDescription': string;
    /**
     * スコア判定基準のID
     * @type {number}
     * @memberof Competition
     */
    'judgementId': number;
    /**
     * public/privateの区分
     * @type {Array<CompetitionPublicSettingInner>}
     * @memberof Competition
     */
    'publicSetting': Array<CompetitionPublicSettingInner>;
    /**
     * 正解データファイルID
     * @type {string}
     * @memberof Competition
     */
    'answerDataId': string;
    /**
     * 参加チーム
     * @type {Array<TeamCoreInfo>}
     * @memberof Competition
     */
    'teams': Array<TeamCoreInfo>;
    /**
     * コンペティション開始日時
     * @type {string}
     * @memberof Competition
     */
    'startAt': string;
    /**
     * コンペティション終了日時
     * @type {string}
     * @memberof Competition
     */
    'endAt': string;
}
/**
 * コンペティションの基本情報
 * @export
 * @interface CompetitionCoreInfo
 */
export interface CompetitionCoreInfo {
    /**
     * コンペティションID
     * @type {string}
     * @memberof CompetitionCoreInfo
     */
    'id': string;
    /**
     * コンペティション名
     * @type {string}
     * @memberof CompetitionCoreInfo
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface CompetitionPublicSettingInner
 */
export interface CompetitionPublicSettingInner {
    /**
     * 
     * @type {number}
     * @memberof CompetitionPublicSettingInner
     */
    'answerDataSpecificId'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CompetitionPublicSettingInner
     */
    'isPublic'?: boolean;
}
/**
 * 
 * @export
 * @interface JoinCompetitionRequest
 */
export interface JoinCompetitionRequest {
    /**
     * チーム名
     * @type {string}
     * @memberof JoinCompetitionRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface Leaderboard
 */
export interface Leaderboard {
    /**
     * 順位
     * @type {number}
     * @memberof Leaderboard
     */
    'rank': number;
    /**
     * チームID
     * @type {string}
     * @memberof Leaderboard
     */
    'teamId': string;
    /**
     * スコア
     * @type {number}
     * @memberof Leaderboard
     */
    'score': number;
    /**
     * のべ提出回数
     * @type {number}
     * @memberof Leaderboard
     */
    'totalSubmissionCount': number;
    /**
     * 提出日時
     * @type {string}
     * @memberof Leaderboard
     */
    'submittedAt': string;
}
/**
 * チームのマージリクエスト
 * @export
 * @interface MergeRequest
 */
export interface MergeRequest {
    /**
     * 
     * @type {TeamCoreInfo}
     * @memberof MergeRequest
     */
    'from'?: TeamCoreInfo;
    /**
     * 
     * @type {TeamCoreInfo}
     * @memberof MergeRequest
     */
    'to'?: TeamCoreInfo;
    /**
     * 承認待ちユーザー
     * @type {Array<User>}
     * @memberof MergeRequest
     */
    'acceptanceQueue'?: Array<User>;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * エラーメッセージ
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface OauthCallbackResponse
 */
export interface OauthCallbackResponse {
    /**
     * 
     * @type {string}
     * @memberof OauthCallbackResponse
     */
    'redirectUri': string;
}
/**
 * 
 * @export
 * @interface OauthCodeRequest
 */
export interface OauthCodeRequest {
    /**
     * 
     * @type {string}
     * @memberof OauthCodeRequest
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface RequestTeamMergingRequest
 */
export interface RequestTeamMergingRequest {
    /**
     * マージ元のチームID
     * @type {string}
     * @memberof RequestTeamMergingRequest
     */
    'from': string;
    /**
     * マージ先のチームID
     * @type {string}
     * @memberof RequestTeamMergingRequest
     */
    'to': string;
}
/**
 * サブミッション
 * @export
 * @interface Submission
 */
export interface Submission {
    /**
     * ID
     * @type {string}
     * @memberof Submission
     */
    'id': string;
    /**
     * 
     * @type {CompetitionCoreInfo}
     * @memberof Submission
     */
    'contest'?: CompetitionCoreInfo;
    /**
     * 
     * @type {TeamCoreInfo}
     * @memberof Submission
     */
    'team': TeamCoreInfo;
    /**
     * 
     * @type {User}
     * @memberof Submission
     */
    'submitter': User;
    /**
     * コメント
     * @type {string}
     * @memberof Submission
     */
    'comment': string;
    /**
     * 提出されたCSVファイルのID
     * @type {string}
     * @memberof Submission
     */
    'fileId': string;
    /**
     * スコア
     * @type {number}
     * @memberof Submission
     */
    'score': number;
    /**
     * 
     * @type {string}
     * @memberof Submission
     */
    'submittedAt': string;
}
/**
 * チーム
 * @export
 * @interface Team
 */
export interface Team {
    /**
     * ID
     * @type {string}
     * @memberof Team
     */
    'id': string;
    /**
     * チーム名
     * @type {string}
     * @memberof Team
     */
    'name': string;
    /**
     * コンテストID
     * @type {string}
     * @memberof Team
     */
    'contestsId': string;
    /**
     * 所属ユーザー
     * @type {Array<User>}
     * @memberof Team
     */
    'users': Array<User>;
    /**
     * チームのマージ中かどうか
     * @type {boolean}
     * @memberof Team
     */
    'isMerging': boolean;
}
/**
 * チームの基本情報
 * @export
 * @interface TeamCoreInfo
 */
export interface TeamCoreInfo {
    /**
     * ID
     * @type {string}
     * @memberof TeamCoreInfo
     */
    'id': string;
    /**
     * チーム名
     * @type {string}
     * @memberof TeamCoreInfo
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface UpdateSubmissionRequest
 */
export interface UpdateSubmissionRequest {
    /**
     * コメント
     * @type {string}
     * @memberof UpdateSubmissionRequest
     */
    'comment': string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * ユーザー名 (traP ID)
     * @type {string}
     * @memberof User
     */
    'name': string;
    /**
     * アイコンURL
     * @type {string}
     * @memberof User
     */
    'iconUrl': string;
}

/**
 * CompetitionsApi - axios parameter creator
 * @export
 */
export const CompetitionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary コンペティションの詳細を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompetition: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/competitions/{cid}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary コンペティションの一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompetitions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/competitions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary コンペティションのリーダーボードの取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeaderBoard: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/competitions/{cid}/leaderboard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 指定のコンペティションでの自分の所属チームを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyTeamInCompetition: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/teams/me/{cid}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary コンペティションへの自チームの提出一覧
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmissionsByMyTeamInCompetition: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/competitions/{cid}/submissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary コンペティションに参加しているチームの一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamsInCompetition: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/competitions/{cid}/teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary コンペティションへの参加登録
         * @param {JoinCompetitionRequest} [joinCompetitionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinCompetition: async (joinCompetitionRequest?: JoinCompetitionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/competitions/{cid}/teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(joinCompetitionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary コンペティションへの解答提出
         * @param {string} file 提出データ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSubmission: async (file: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('postSubmission', 'file', file)
            const localVarPath = `/competitions/{cid}/submissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompetitionsApi - functional programming interface
 * @export
 */
export const CompetitionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompetitionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary コンペティションの詳細を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompetition(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Competition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompetition(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary コンペティションの一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompetitions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CompetitionCoreInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompetitions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary コンペティションのリーダーボードの取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLeaderBoard(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Leaderboard>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLeaderBoard(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 指定のコンペティションでの自分の所属チームを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyTeamInCompetition(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamCoreInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyTeamInCompetition(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary コンペティションへの自チームの提出一覧
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubmissionsByMyTeamInCompetition(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Submission>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubmissionsByMyTeamInCompetition(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary コンペティションに参加しているチームの一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeamsInCompetition(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TeamCoreInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeamsInCompetition(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary コンペティションへの参加登録
         * @param {JoinCompetitionRequest} [joinCompetitionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async joinCompetition(joinCompetitionRequest?: JoinCompetitionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.joinCompetition(joinCompetitionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary コンペティションへの解答提出
         * @param {string} file 提出データ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSubmission(file: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSubmission(file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompetitionsApi - factory interface
 * @export
 */
export const CompetitionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompetitionsApiFp(configuration)
    return {
        /**
         * 
         * @summary コンペティションの詳細を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompetition(options?: any): AxiosPromise<Competition> {
            return localVarFp.getCompetition(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary コンペティションの一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompetitions(options?: any): AxiosPromise<Array<CompetitionCoreInfo>> {
            return localVarFp.getCompetitions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary コンペティションのリーダーボードの取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeaderBoard(options?: any): AxiosPromise<Array<Leaderboard>> {
            return localVarFp.getLeaderBoard(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 指定のコンペティションでの自分の所属チームを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyTeamInCompetition(options?: any): AxiosPromise<TeamCoreInfo> {
            return localVarFp.getMyTeamInCompetition(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary コンペティションへの自チームの提出一覧
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmissionsByMyTeamInCompetition(options?: any): AxiosPromise<Array<Submission>> {
            return localVarFp.getSubmissionsByMyTeamInCompetition(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary コンペティションに参加しているチームの一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamsInCompetition(options?: any): AxiosPromise<Array<TeamCoreInfo>> {
            return localVarFp.getTeamsInCompetition(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary コンペティションへの参加登録
         * @param {JoinCompetitionRequest} [joinCompetitionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinCompetition(joinCompetitionRequest?: JoinCompetitionRequest, options?: any): AxiosPromise<void> {
            return localVarFp.joinCompetition(joinCompetitionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary コンペティションへの解答提出
         * @param {string} file 提出データ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSubmission(file: string, options?: any): AxiosPromise<void> {
            return localVarFp.postSubmission(file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompetitionsApi - object-oriented interface
 * @export
 * @class CompetitionsApi
 * @extends {BaseAPI}
 */
export class CompetitionsApi extends BaseAPI {
    /**
     * 
     * @summary コンペティションの詳細を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public getCompetition(options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).getCompetition(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary コンペティションの一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public getCompetitions(options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).getCompetitions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary コンペティションのリーダーボードの取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public getLeaderBoard(options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).getLeaderBoard(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 指定のコンペティションでの自分の所属チームを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public getMyTeamInCompetition(options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).getMyTeamInCompetition(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary コンペティションへの自チームの提出一覧
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public getSubmissionsByMyTeamInCompetition(options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).getSubmissionsByMyTeamInCompetition(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary コンペティションに参加しているチームの一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public getTeamsInCompetition(options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).getTeamsInCompetition(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary コンペティションへの参加登録
     * @param {JoinCompetitionRequest} [joinCompetitionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public joinCompetition(joinCompetitionRequest?: JoinCompetitionRequest, options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).joinCompetition(joinCompetitionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary コンペティションへの解答提出
     * @param {string} file 提出データ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public postSubmission(file: string, options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).postSubmission(file, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GeneralApi - axios parameter creator
 * @export
 */
export const GeneralApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * pingを飛ばします。
         * @summary pingを飛ばす
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPing: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GeneralApi - functional programming interface
 * @export
 */
export const GeneralApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GeneralApiAxiosParamCreator(configuration)
    return {
        /**
         * pingを飛ばします。
         * @summary pingを飛ばす
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPing(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPing(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GeneralApi - factory interface
 * @export
 */
export const GeneralApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GeneralApiFp(configuration)
    return {
        /**
         * pingを飛ばします。
         * @summary pingを飛ばす
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPing(options?: any): AxiosPromise<string> {
            return localVarFp.getPing(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GeneralApi - object-oriented interface
 * @export
 * @class GeneralApi
 * @extends {BaseAPI}
 */
export class GeneralApi extends BaseAPI {
    /**
     * pingを飛ばします。
     * @summary pingを飛ばす
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    public getPing(options?: AxiosRequestConfig) {
        return GeneralApiFp(this.configuration).getPing(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OAuthApi - axios parameter creator
 * @export
 */
export const OAuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * OAuth認可用のコールバックURLを取得します。   ※ クッキーを利用してセッション管理を行います。 
         * @summary OAuthのコールバックURLを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOauthCallback: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/oauth/callback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 入手したOAuthコードを送信してログインします。   送信されたコードから入手したアクセストークンはサーバーに保存されます。 
         * @summary OAuthコードを送信してログイン
         * @param {OauthCodeRequest} oauthCodeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOauthCode: async (oauthCodeRequest: OauthCodeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oauthCodeRequest' is not null or undefined
            assertParamExists('postOauthCode', 'oauthCodeRequest', oauthCodeRequest)
            const localVarPath = `/oauth/code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(oauthCodeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OAuthApi - functional programming interface
 * @export
 */
export const OAuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OAuthApiAxiosParamCreator(configuration)
    return {
        /**
         * OAuth認可用のコールバックURLを取得します。   ※ クッキーを利用してセッション管理を行います。 
         * @summary OAuthのコールバックURLを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOauthCallback(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OauthCallbackResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOauthCallback(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 入手したOAuthコードを送信してログインします。   送信されたコードから入手したアクセストークンはサーバーに保存されます。 
         * @summary OAuthコードを送信してログイン
         * @param {OauthCodeRequest} oauthCodeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postOauthCode(oauthCodeRequest: OauthCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postOauthCode(oauthCodeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OAuthApi - factory interface
 * @export
 */
export const OAuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OAuthApiFp(configuration)
    return {
        /**
         * OAuth認可用のコールバックURLを取得します。   ※ クッキーを利用してセッション管理を行います。 
         * @summary OAuthのコールバックURLを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOauthCallback(options?: any): AxiosPromise<OauthCallbackResponse> {
            return localVarFp.getOauthCallback(options).then((request) => request(axios, basePath));
        },
        /**
         * 入手したOAuthコードを送信してログインします。   送信されたコードから入手したアクセストークンはサーバーに保存されます。 
         * @summary OAuthコードを送信してログイン
         * @param {OauthCodeRequest} oauthCodeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOauthCode(oauthCodeRequest: OauthCodeRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postOauthCode(oauthCodeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OAuthApi - object-oriented interface
 * @export
 * @class OAuthApi
 * @extends {BaseAPI}
 */
export class OAuthApi extends BaseAPI {
    /**
     * OAuth認可用のコールバックURLを取得します。   ※ クッキーを利用してセッション管理を行います。 
     * @summary OAuthのコールバックURLを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApi
     */
    public getOauthCallback(options?: AxiosRequestConfig) {
        return OAuthApiFp(this.configuration).getOauthCallback(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 入手したOAuthコードを送信してログインします。   送信されたコードから入手したアクセストークンはサーバーに保存されます。 
     * @summary OAuthコードを送信してログイン
     * @param {OauthCodeRequest} oauthCodeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApi
     */
    public postOauthCode(oauthCodeRequest: OauthCodeRequest, options?: AxiosRequestConfig) {
        return OAuthApiFp(this.configuration).postOauthCode(oauthCodeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SubmissionsApi - axios parameter creator
 * @export
 */
export const SubmissionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 提出の詳細を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmission: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/submissions/{sid}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary コンペティションへの自チームの提出一覧
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmissionsByMyTeamInCompetition: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/competitions/{cid}/submissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary コンペティションへの解答提出
         * @param {string} file 提出データ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSubmission: async (file: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('postSubmission', 'file', file)
            const localVarPath = `/competitions/{cid}/submissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 提出のコメントを変更
         * @param {UpdateSubmissionRequest} [updateSubmissionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubmission: async (updateSubmissionRequest?: UpdateSubmissionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/submissions/{sid}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSubmissionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubmissionsApi - functional programming interface
 * @export
 */
export const SubmissionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubmissionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 提出の詳細を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubmission(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Submission>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubmission(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary コンペティションへの自チームの提出一覧
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubmissionsByMyTeamInCompetition(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Submission>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubmissionsByMyTeamInCompetition(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary コンペティションへの解答提出
         * @param {string} file 提出データ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSubmission(file: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSubmission(file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 提出のコメントを変更
         * @param {UpdateSubmissionRequest} [updateSubmissionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSubmission(updateSubmissionRequest?: UpdateSubmissionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSubmission(updateSubmissionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SubmissionsApi - factory interface
 * @export
 */
export const SubmissionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubmissionsApiFp(configuration)
    return {
        /**
         * 
         * @summary 提出の詳細を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmission(options?: any): AxiosPromise<Submission> {
            return localVarFp.getSubmission(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary コンペティションへの自チームの提出一覧
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmissionsByMyTeamInCompetition(options?: any): AxiosPromise<Array<Submission>> {
            return localVarFp.getSubmissionsByMyTeamInCompetition(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary コンペティションへの解答提出
         * @param {string} file 提出データ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSubmission(file: string, options?: any): AxiosPromise<void> {
            return localVarFp.postSubmission(file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 提出のコメントを変更
         * @param {UpdateSubmissionRequest} [updateSubmissionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubmission(updateSubmissionRequest?: UpdateSubmissionRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateSubmission(updateSubmissionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubmissionsApi - object-oriented interface
 * @export
 * @class SubmissionsApi
 * @extends {BaseAPI}
 */
export class SubmissionsApi extends BaseAPI {
    /**
     * 
     * @summary 提出の詳細を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionsApi
     */
    public getSubmission(options?: AxiosRequestConfig) {
        return SubmissionsApiFp(this.configuration).getSubmission(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary コンペティションへの自チームの提出一覧
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionsApi
     */
    public getSubmissionsByMyTeamInCompetition(options?: AxiosRequestConfig) {
        return SubmissionsApiFp(this.configuration).getSubmissionsByMyTeamInCompetition(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary コンペティションへの解答提出
     * @param {string} file 提出データ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionsApi
     */
    public postSubmission(file: string, options?: AxiosRequestConfig) {
        return SubmissionsApiFp(this.configuration).postSubmission(file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 提出のコメントを変更
     * @param {UpdateSubmissionRequest} [updateSubmissionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionsApi
     */
    public updateSubmission(updateSubmissionRequest?: UpdateSubmissionRequest, options?: AxiosRequestConfig) {
        return SubmissionsApiFp(this.configuration).updateSubmission(updateSubmissionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TeamsApi - axios parameter creator
 * @export
 */
export const TeamsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 指定のコンペティションでの自分の所属チームを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyTeamInCompetition: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/teams/me/{cid}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 自分が所属しているチームの一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyTeams: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/teams/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary チームの詳細を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeam: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/teams/{tid}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary チームのマージリクエスト情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamMergingStatus: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/teams/{tid}/merge`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary コンペティションに参加しているチームの一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamsInCompetition: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/competitions/{cid}/teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary チームのマージをリクエストする
         * @param {RequestTeamMergingRequest} [requestTeamMergingRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTeamMerging: async (requestTeamMergingRequest?: RequestTeamMergingRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/teams/merge`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestTeamMergingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary チームの情報を変更
         * @param {JoinCompetitionRequest} [joinCompetitionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeam: async (joinCompetitionRequest?: JoinCompetitionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/teams/{tid}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(joinCompetitionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamsApi - functional programming interface
 * @export
 */
export const TeamsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeamsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 指定のコンペティションでの自分の所属チームを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyTeamInCompetition(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamCoreInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyTeamInCompetition(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 自分が所属しているチームの一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyTeams(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TeamCoreInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyTeams(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary チームの詳細を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeam(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeam(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary チームのマージリクエスト情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeamMergingStatus(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MergeRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeamMergingStatus(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary コンペティションに参加しているチームの一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeamsInCompetition(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TeamCoreInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeamsInCompetition(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary チームのマージをリクエストする
         * @param {RequestTeamMergingRequest} [requestTeamMergingRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestTeamMerging(requestTeamMergingRequest?: RequestTeamMergingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestTeamMerging(requestTeamMergingRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary チームの情報を変更
         * @param {JoinCompetitionRequest} [joinCompetitionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTeam(joinCompetitionRequest?: JoinCompetitionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTeam(joinCompetitionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TeamsApi - factory interface
 * @export
 */
export const TeamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeamsApiFp(configuration)
    return {
        /**
         * 
         * @summary 指定のコンペティションでの自分の所属チームを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyTeamInCompetition(options?: any): AxiosPromise<TeamCoreInfo> {
            return localVarFp.getMyTeamInCompetition(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 自分が所属しているチームの一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyTeams(options?: any): AxiosPromise<Array<TeamCoreInfo>> {
            return localVarFp.getMyTeams(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary チームの詳細を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeam(options?: any): AxiosPromise<Team> {
            return localVarFp.getTeam(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary チームのマージリクエスト情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamMergingStatus(options?: any): AxiosPromise<MergeRequest> {
            return localVarFp.getTeamMergingStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary コンペティションに参加しているチームの一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamsInCompetition(options?: any): AxiosPromise<Array<TeamCoreInfo>> {
            return localVarFp.getTeamsInCompetition(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary チームのマージをリクエストする
         * @param {RequestTeamMergingRequest} [requestTeamMergingRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestTeamMerging(requestTeamMergingRequest?: RequestTeamMergingRequest, options?: any): AxiosPromise<void> {
            return localVarFp.requestTeamMerging(requestTeamMergingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary チームの情報を変更
         * @param {JoinCompetitionRequest} [joinCompetitionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeam(joinCompetitionRequest?: JoinCompetitionRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateTeam(joinCompetitionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeamsApi - object-oriented interface
 * @export
 * @class TeamsApi
 * @extends {BaseAPI}
 */
export class TeamsApi extends BaseAPI {
    /**
     * 
     * @summary 指定のコンペティションでの自分の所属チームを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getMyTeamInCompetition(options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getMyTeamInCompetition(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 自分が所属しているチームの一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getMyTeams(options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getMyTeams(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary チームの詳細を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getTeam(options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getTeam(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary チームのマージリクエスト情報を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getTeamMergingStatus(options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getTeamMergingStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary コンペティションに参加しているチームの一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getTeamsInCompetition(options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getTeamsInCompetition(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary チームのマージをリクエストする
     * @param {RequestTeamMergingRequest} [requestTeamMergingRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public requestTeamMerging(requestTeamMergingRequest?: RequestTeamMergingRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).requestTeamMerging(requestTeamMergingRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary チームの情報を変更
     * @param {JoinCompetitionRequest} [joinCompetitionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public updateTeam(joinCompetitionRequest?: JoinCompetitionRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).updateTeam(joinCompetitionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 自分のユーザー情報の取得を行います。   ログイン確認用としても使います。 
         * @summary 自分のユーザー情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersMe: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 自分のユーザー情報の取得を行います。   ログイン確認用としても使います。 
         * @summary 自分のユーザー情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersMe(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersMe(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 自分のユーザー情報の取得を行います。   ログイン確認用としても使います。 
         * @summary 自分のユーザー情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersMe(options?: any): AxiosPromise<User> {
            return localVarFp.getUsersMe(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 自分のユーザー情報の取得を行います。   ログイン確認用としても使います。 
     * @summary 自分のユーザー情報を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUsersMe(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUsersMe(options).then((request) => request(this.axios, this.basePath));
    }
}

export class Apis extends BaseAPI {
    /**
     *
     * @summary コンペティションの詳細を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public getCompetition(options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).getCompetition(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary コンペティションの一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public getCompetitions(options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).getCompetitions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary コンペティションのリーダーボードの取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public getLeaderBoard(options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).getLeaderBoard(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary 指定のコンペティションでの自分の所属チームを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getMyTeamInCompetition(options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getMyTeamInCompetition(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary コンペティションへの自チームの提出一覧
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionsApi
     */
    public getSubmissionsByMyTeamInCompetition(options?: AxiosRequestConfig) {
        return SubmissionsApiFp(this.configuration).getSubmissionsByMyTeamInCompetition(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary コンペティションに参加しているチームの一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getTeamsInCompetition(options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getTeamsInCompetition(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary コンペティションへの参加登録
     * @param {JoinCompetitionRequest} [joinCompetitionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public joinCompetition(joinCompetitionRequest?: JoinCompetitionRequest, options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).joinCompetition(joinCompetitionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary コンペティションへの解答提出
     * @param {string} file 提出データ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionsApi
     */
    public postSubmission(file: string, options?: AxiosRequestConfig) {
        return SubmissionsApiFp(this.configuration).postSubmission(file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * pingを飛ばします。
     * @summary pingを飛ばす
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    public getPing(options?: AxiosRequestConfig) {
        return GeneralApiFp(this.configuration).getPing(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * OAuth認可用のコールバックURLを取得します。   ※ クッキーを利用してセッション管理を行います。 
     * @summary OAuthのコールバックURLを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApi
     */
    public getOauthCallback(options?: AxiosRequestConfig) {
        return OAuthApiFp(this.configuration).getOauthCallback(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 入手したOAuthコードを送信してログインします。   送信されたコードから入手したアクセストークンはサーバーに保存されます。 
     * @summary OAuthコードを送信してログイン
     * @param {OauthCodeRequest} oauthCodeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApi
     */
    public postOauthCode(oauthCodeRequest: OauthCodeRequest, options?: AxiosRequestConfig) {
        return OAuthApiFp(this.configuration).postOauthCode(oauthCodeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary 提出の詳細を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionsApi
     */
    public getSubmission(options?: AxiosRequestConfig) {
        return SubmissionsApiFp(this.configuration).getSubmission(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary 提出のコメントを変更
     * @param {UpdateSubmissionRequest} [updateSubmissionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionsApi
     */
    public updateSubmission(updateSubmissionRequest?: UpdateSubmissionRequest, options?: AxiosRequestConfig) {
        return SubmissionsApiFp(this.configuration).updateSubmission(updateSubmissionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary 自分が所属しているチームの一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getMyTeams(options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getMyTeams(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary チームの詳細を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getTeam(options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getTeam(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary チームのマージリクエスト情報を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getTeamMergingStatus(options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getTeamMergingStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary チームのマージをリクエストする
     * @param {RequestTeamMergingRequest} [requestTeamMergingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public requestTeamMerging(requestTeamMergingRequest?: RequestTeamMergingRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).requestTeamMerging(requestTeamMergingRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary チームの情報を変更
     * @param {JoinCompetitionRequest} [joinCompetitionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public updateTeam(joinCompetitionRequest?: JoinCompetitionRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).updateTeam(joinCompetitionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 自分のユーザー情報の取得を行います。   ログイン確認用としても使います。 
     * @summary 自分のユーザー情報を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUsersMe(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUsersMe(options).then((request) => request(this.axios, this.basePath));
    }
}
