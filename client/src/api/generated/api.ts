/* tslint:disable */
/* eslint-disable */
/**
 * DacQ API
 * DacQ Score Server API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * コンペティション
 * @export
 * @interface Competition
 */
export interface Competition {
    /**
     * コンペティションID
     * @type {string}
     * @memberof Competition
     */
    'id': string;
    /**
     * コンペティション名
     * @type {string}
     * @memberof Competition
     */
    'name': string;
    /**
     * 
     * @type {User}
     * @memberof Competition
     */
    'author': User;
    /**
     * ルール
     * @type {string}
     * @memberof Competition
     */
    'rule': string;
    /**
     * 学習データファイルID
     * @type {string}
     * @memberof Competition
     */
    'dataId': string;
    /**
     * 学習データの説明
     * @type {string}
     * @memberof Competition
     */
    'dataDescription': string;
    /**
     * 参加チーム
     * @type {Array<TeamCoreInfo>}
     * @memberof Competition
     */
    'teams': Array<TeamCoreInfo>;
    /**
     * コンペティション開始日時
     * @type {string}
     * @memberof Competition
     */
    'startAt': string;
    /**
     * コンペティション終了日時
     * @type {string}
     * @memberof Competition
     */
    'endAt': string;
}
/**
 * コンペティションの基本情報
 * @export
 * @interface CompetitionCoreInfo
 */
export interface CompetitionCoreInfo {
    /**
     * コンペティションID
     * @type {string}
     * @memberof CompetitionCoreInfo
     */
    'id': string;
    /**
     * コンペティション名
     * @type {string}
     * @memberof CompetitionCoreInfo
     */
    'name': string;
    /**
     * コンペティション開始日時
     * @type {string}
     * @memberof CompetitionCoreInfo
     */
    'startAt': string;
    /**
     * コンペティション終了日時
     * @type {string}
     * @memberof CompetitionCoreInfo
     */
    'endAt': string;
}
/**
 * @type GetTeamMergeStatus200Response
 * @export
 */
export type GetTeamMergeStatus200Response = MergeRequest | object;

/**
 * 
 * @export
 * @interface Leaderboard
 */
export interface Leaderboard {
    /**
     * 順位
     * @type {number}
     * @memberof Leaderboard
     */
    'rank': number;
    /**
     * 
     * @type {Team}
     * @memberof Leaderboard
     */
    'team': Team;
    /**
     * 最高スコア
     * @type {number}
     * @memberof Leaderboard
     */
    'bestScore': number;
    /**
     * のべ提出回数
     * @type {number}
     * @memberof Leaderboard
     */
    'submissionsCount': number;
    /**
     * 最終提出日時
     * @type {string}
     * @memberof Leaderboard
     */
    'lastSubmittedAt': string;
}
/**
 * チームのマージリクエスト
 * @export
 * @interface MergeRequest
 */
export interface MergeRequest {
    /**
     * 
     * @type {Team}
     * @memberof MergeRequest
     */
    'from': Team;
    /**
     * 
     * @type {Team}
     * @memberof MergeRequest
     */
    'to': Team;
    /**
     * 承認待ちユーザー
     * @type {Array<User>}
     * @memberof MergeRequest
     */
    'acceptanceQueue': Array<User>;
}
/**
 * 汎用エラーメッセージ
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * エラーメッセージ
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface OauthCallbackResponse
 */
export interface OauthCallbackResponse {
    /**
     * 
     * @type {string}
     * @memberof OauthCallbackResponse
     */
    'redirectUri': string;
}
/**
 * 
 * @export
 * @interface OauthCodeRequest
 */
export interface OauthCodeRequest {
    /**
     * 
     * @type {string}
     * @memberof OauthCodeRequest
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface PatchSubmissionRequest
 */
export interface PatchSubmissionRequest {
    /**
     * コメント
     * @type {string}
     * @memberof PatchSubmissionRequest
     */
    'comment': string;
}
/**
 * 
 * @export
 * @interface PatchTeamRequest
 */
export interface PatchTeamRequest {
    /**
     * チーム名
     * @type {string}
     * @memberof PatchTeamRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface PostCompetitionTeamsRequest
 */
export interface PostCompetitionTeamsRequest {
    /**
     * チーム名
     * @type {string}
     * @memberof PostCompetitionTeamsRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface PostTeamMergeRequest
 */
export interface PostTeamMergeRequest {
    /**
     * マージ元のチームID
     * @type {string}
     * @memberof PostTeamMergeRequest
     */
    'from': string;
    /**
     * マージ先のチームID
     * @type {string}
     * @memberof PostTeamMergeRequest
     */
    'to': string;
}
/**
 * サブミッション
 * @export
 * @interface Submission
 */
export interface Submission {
    /**
     * ID
     * @type {number}
     * @memberof Submission
     */
    'id': number;
    /**
     * 
     * @type {CompetitionCoreInfo}
     * @memberof Submission
     */
    'competition': CompetitionCoreInfo;
    /**
     * 
     * @type {TeamCoreInfo}
     * @memberof Submission
     */
    'team': TeamCoreInfo;
    /**
     * 
     * @type {User}
     * @memberof Submission
     */
    'submitter': User;
    /**
     * コメント
     * @type {string}
     * @memberof Submission
     */
    'comment': string;
    /**
     * 提出されたCSVファイルのID
     * @type {string}
     * @memberof Submission
     */
    'fileId': string;
    /**
     * スコア NULLの場合、まだスコア計算が終了していないことを示す 
     * @type {number}
     * @memberof Submission
     */
    'score'?: number;
    /**
     * 提出日時
     * @type {string}
     * @memberof Submission
     */
    'submittedAt': string;
}
/**
 * チーム
 * @export
 * @interface Team
 */
export interface Team {
    /**
     * ID
     * @type {string}
     * @memberof Team
     */
    'id': string;
    /**
     * チーム名
     * @type {string}
     * @memberof Team
     */
    'name': string;
    /**
     * 
     * @type {CompetitionCoreInfo}
     * @memberof Team
     */
    'competition': CompetitionCoreInfo;
    /**
     * 所属ユーザー
     * @type {Array<User>}
     * @memberof Team
     */
    'users': Array<User>;
    /**
     * チームがマージ中かどうか
     * @type {boolean}
     * @memberof Team
     */
    'isMerging': boolean;
}
/**
 * チームの基本情報
 * @export
 * @interface TeamCoreInfo
 */
export interface TeamCoreInfo {
    /**
     * ID
     * @type {string}
     * @memberof TeamCoreInfo
     */
    'id': string;
    /**
     * チーム名
     * @type {string}
     * @memberof TeamCoreInfo
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * ユーザー名 (traP ID)
     * @type {string}
     * @memberof User
     */
    'name': string;
    /**
     * アイコンURL
     * @type {string}
     * @memberof User
     */
    'iconUrl': string;
}

/**
 * CompetitionsApi - axios parameter creator
 * @export
 */
export const CompetitionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * コンペティションの詳細を取得します。 
         * @summary コンペティションの詳細を取得
         * @param {string} competitionId コンペティションのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompetition: async (competitionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'competitionId' is not null or undefined
            assertParamExists('getCompetition', 'competitionId', competitionId)
            const localVarPath = `/competitions/{competitionId}`
                .replace(`{${"competitionId"}}`, encodeURIComponent(String(competitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * コンペティションに参加しているチームの一覧を取得します。 
         * @summary コンペティションの参加チームの一覧を取得
         * @param {string} competitionId コンペティションのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompetitionTeams: async (competitionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'competitionId' is not null or undefined
            assertParamExists('getCompetitionTeams', 'competitionId', competitionId)
            const localVarPath = `/competitions/{competitionId}/teams`
                .replace(`{${"competitionId"}}`, encodeURIComponent(String(competitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * コンペティションの一覧を取得します。 
         * @summary コンペティションの一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompetitions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/competitions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * コンペティションのリーダーボードを取得します。 
         * @summary コンペティションのリーダーボードの取得
         * @param {string} competitionId コンペティションのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeaderBoard: async (competitionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'competitionId' is not null or undefined
            assertParamExists('getLeaderBoard', 'competitionId', competitionId)
            const localVarPath = `/competitions/{competitionId}/leaderboard`
                .replace(`{${"competitionId"}}`, encodeURIComponent(String(competitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定のコンペティションでの自分の所属チームを取得します。 
         * @summary 指定のコンペティションでの自分の所属チームを取得
         * @param {string} competitionId コンペティションのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyTeamInCompetition: async (competitionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'competitionId' is not null or undefined
            assertParamExists('getMyTeamInCompetition', 'competitionId', competitionId)
            const localVarPath = `/teams/me/{competitionId}`
                .replace(`{${"competitionId"}}`, encodeURIComponent(String(competitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * コンペティションへの自チームの提出一覧を取得します。 
         * @summary コンペティションへの自チームの提出一覧
         * @param {string} competitionId コンペティションのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyTeamSubmissions: async (competitionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'competitionId' is not null or undefined
            assertParamExists('getMyTeamSubmissions', 'competitionId', competitionId)
            const localVarPath = `/competitions/{competitionId}/submissions`
                .replace(`{${"competitionId"}}`, encodeURIComponent(String(competitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * コンペティションへの参加登録を行います。 
         * @summary コンペティションへの参加登録
         * @param {string} competitionId コンペティションのID
         * @param {PostCompetitionTeamsRequest} [postCompetitionTeamsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCompetitionTeams: async (competitionId: string, postCompetitionTeamsRequest?: PostCompetitionTeamsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'competitionId' is not null or undefined
            assertParamExists('postCompetitionTeams', 'competitionId', competitionId)
            const localVarPath = `/competitions/{competitionId}/teams`
                .replace(`{${"competitionId"}}`, encodeURIComponent(String(competitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postCompetitionTeamsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * コンペティションへの解答提出を行います。 
         * @summary コンペティションへの解答提出
         * @param {string} competitionId コンペティションのID
         * @param {string} file 提出データ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSubmissions: async (competitionId: string, file: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'competitionId' is not null or undefined
            assertParamExists('postSubmissions', 'competitionId', competitionId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('postSubmissions', 'file', file)
            const localVarPath = `/competitions/{competitionId}/submissions`
                .replace(`{${"competitionId"}}`, encodeURIComponent(String(competitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication cookieAuth required


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompetitionsApi - functional programming interface
 * @export
 */
export const CompetitionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompetitionsApiAxiosParamCreator(configuration)
    return {
        /**
         * コンペティションの詳細を取得します。 
         * @summary コンペティションの詳細を取得
         * @param {string} competitionId コンペティションのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompetition(competitionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Competition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompetition(competitionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * コンペティションに参加しているチームの一覧を取得します。 
         * @summary コンペティションの参加チームの一覧を取得
         * @param {string} competitionId コンペティションのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompetitionTeams(competitionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TeamCoreInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompetitionTeams(competitionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * コンペティションの一覧を取得します。 
         * @summary コンペティションの一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompetitions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CompetitionCoreInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompetitions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * コンペティションのリーダーボードを取得します。 
         * @summary コンペティションのリーダーボードの取得
         * @param {string} competitionId コンペティションのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLeaderBoard(competitionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Leaderboard>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLeaderBoard(competitionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定のコンペティションでの自分の所属チームを取得します。 
         * @summary 指定のコンペティションでの自分の所属チームを取得
         * @param {string} competitionId コンペティションのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyTeamInCompetition(competitionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamCoreInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyTeamInCompetition(competitionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * コンペティションへの自チームの提出一覧を取得します。 
         * @summary コンペティションへの自チームの提出一覧
         * @param {string} competitionId コンペティションのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyTeamSubmissions(competitionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Submission>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyTeamSubmissions(competitionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * コンペティションへの参加登録を行います。 
         * @summary コンペティションへの参加登録
         * @param {string} competitionId コンペティションのID
         * @param {PostCompetitionTeamsRequest} [postCompetitionTeamsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCompetitionTeams(competitionId: string, postCompetitionTeamsRequest?: PostCompetitionTeamsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCompetitionTeams(competitionId, postCompetitionTeamsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * コンペティションへの解答提出を行います。 
         * @summary コンペティションへの解答提出
         * @param {string} competitionId コンペティションのID
         * @param {string} file 提出データ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSubmissions(competitionId: string, file: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Submission>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSubmissions(competitionId, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompetitionsApi - factory interface
 * @export
 */
export const CompetitionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompetitionsApiFp(configuration)
    return {
        /**
         * コンペティションの詳細を取得します。 
         * @summary コンペティションの詳細を取得
         * @param {string} competitionId コンペティションのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompetition(competitionId: string, options?: any): AxiosPromise<Competition> {
            return localVarFp.getCompetition(competitionId, options).then((request) => request(axios, basePath));
        },
        /**
         * コンペティションに参加しているチームの一覧を取得します。 
         * @summary コンペティションの参加チームの一覧を取得
         * @param {string} competitionId コンペティションのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompetitionTeams(competitionId: string, options?: any): AxiosPromise<Array<TeamCoreInfo>> {
            return localVarFp.getCompetitionTeams(competitionId, options).then((request) => request(axios, basePath));
        },
        /**
         * コンペティションの一覧を取得します。 
         * @summary コンペティションの一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompetitions(options?: any): AxiosPromise<Array<CompetitionCoreInfo>> {
            return localVarFp.getCompetitions(options).then((request) => request(axios, basePath));
        },
        /**
         * コンペティションのリーダーボードを取得します。 
         * @summary コンペティションのリーダーボードの取得
         * @param {string} competitionId コンペティションのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeaderBoard(competitionId: string, options?: any): AxiosPromise<Array<Leaderboard>> {
            return localVarFp.getLeaderBoard(competitionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定のコンペティションでの自分の所属チームを取得します。 
         * @summary 指定のコンペティションでの自分の所属チームを取得
         * @param {string} competitionId コンペティションのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyTeamInCompetition(competitionId: string, options?: any): AxiosPromise<TeamCoreInfo> {
            return localVarFp.getMyTeamInCompetition(competitionId, options).then((request) => request(axios, basePath));
        },
        /**
         * コンペティションへの自チームの提出一覧を取得します。 
         * @summary コンペティションへの自チームの提出一覧
         * @param {string} competitionId コンペティションのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyTeamSubmissions(competitionId: string, options?: any): AxiosPromise<Array<Submission>> {
            return localVarFp.getMyTeamSubmissions(competitionId, options).then((request) => request(axios, basePath));
        },
        /**
         * コンペティションへの参加登録を行います。 
         * @summary コンペティションへの参加登録
         * @param {string} competitionId コンペティションのID
         * @param {PostCompetitionTeamsRequest} [postCompetitionTeamsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCompetitionTeams(competitionId: string, postCompetitionTeamsRequest?: PostCompetitionTeamsRequest, options?: any): AxiosPromise<Team> {
            return localVarFp.postCompetitionTeams(competitionId, postCompetitionTeamsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * コンペティションへの解答提出を行います。 
         * @summary コンペティションへの解答提出
         * @param {string} competitionId コンペティションのID
         * @param {string} file 提出データ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSubmissions(competitionId: string, file: string, options?: any): AxiosPromise<Submission> {
            return localVarFp.postSubmissions(competitionId, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompetitionsApi - object-oriented interface
 * @export
 * @class CompetitionsApi
 * @extends {BaseAPI}
 */
export class CompetitionsApi extends BaseAPI {
    /**
     * コンペティションの詳細を取得します。 
     * @summary コンペティションの詳細を取得
     * @param {string} competitionId コンペティションのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public getCompetition(competitionId: string, options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).getCompetition(competitionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * コンペティションに参加しているチームの一覧を取得します。 
     * @summary コンペティションの参加チームの一覧を取得
     * @param {string} competitionId コンペティションのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public getCompetitionTeams(competitionId: string, options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).getCompetitionTeams(competitionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * コンペティションの一覧を取得します。 
     * @summary コンペティションの一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public getCompetitions(options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).getCompetitions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * コンペティションのリーダーボードを取得します。 
     * @summary コンペティションのリーダーボードの取得
     * @param {string} competitionId コンペティションのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public getLeaderBoard(competitionId: string, options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).getLeaderBoard(competitionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定のコンペティションでの自分の所属チームを取得します。 
     * @summary 指定のコンペティションでの自分の所属チームを取得
     * @param {string} competitionId コンペティションのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public getMyTeamInCompetition(competitionId: string, options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).getMyTeamInCompetition(competitionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * コンペティションへの自チームの提出一覧を取得します。 
     * @summary コンペティションへの自チームの提出一覧
     * @param {string} competitionId コンペティションのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public getMyTeamSubmissions(competitionId: string, options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).getMyTeamSubmissions(competitionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * コンペティションへの参加登録を行います。 
     * @summary コンペティションへの参加登録
     * @param {string} competitionId コンペティションのID
     * @param {PostCompetitionTeamsRequest} [postCompetitionTeamsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public postCompetitionTeams(competitionId: string, postCompetitionTeamsRequest?: PostCompetitionTeamsRequest, options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).postCompetitionTeams(competitionId, postCompetitionTeamsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * コンペティションへの解答提出を行います。 
     * @summary コンペティションへの解答提出
     * @param {string} competitionId コンペティションのID
     * @param {string} file 提出データ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public postSubmissions(competitionId: string, file: string, options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).postSubmissions(competitionId, file, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GeneralApi - axios parameter creator
 * @export
 */
export const GeneralApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * pingを飛ばします。
         * @summary pingを飛ばす
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPing: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GeneralApi - functional programming interface
 * @export
 */
export const GeneralApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GeneralApiAxiosParamCreator(configuration)
    return {
        /**
         * pingを飛ばします。
         * @summary pingを飛ばす
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPing(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPing(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GeneralApi - factory interface
 * @export
 */
export const GeneralApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GeneralApiFp(configuration)
    return {
        /**
         * pingを飛ばします。
         * @summary pingを飛ばす
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPing(options?: any): AxiosPromise<string> {
            return localVarFp.getPing(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GeneralApi - object-oriented interface
 * @export
 * @class GeneralApi
 * @extends {BaseAPI}
 */
export class GeneralApi extends BaseAPI {
    /**
     * pingを飛ばします。
     * @summary pingを飛ばす
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    public getPing(options?: AxiosRequestConfig) {
        return GeneralApiFp(this.configuration).getPing(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OAuthApi - axios parameter creator
 * @export
 */
export const OAuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * OAuth認可用のコールバックURLを取得します。   ※ クッキーを利用してセッション管理を行います。 
         * @summary OAuthのコールバックURLを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOauthCallback: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/oauth/callback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 入手したOAuthコードを送信してログインします。   送信されたコードから入手したアクセストークンはサーバーに保存されます。 
         * @summary OAuthコードを送信してログイン
         * @param {OauthCodeRequest} oauthCodeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOauthCode: async (oauthCodeRequest: OauthCodeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oauthCodeRequest' is not null or undefined
            assertParamExists('postOauthCode', 'oauthCodeRequest', oauthCodeRequest)
            const localVarPath = `/oauth/code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(oauthCodeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OAuthApi - functional programming interface
 * @export
 */
export const OAuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OAuthApiAxiosParamCreator(configuration)
    return {
        /**
         * OAuth認可用のコールバックURLを取得します。   ※ クッキーを利用してセッション管理を行います。 
         * @summary OAuthのコールバックURLを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOauthCallback(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OauthCallbackResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOauthCallback(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 入手したOAuthコードを送信してログインします。   送信されたコードから入手したアクセストークンはサーバーに保存されます。 
         * @summary OAuthコードを送信してログイン
         * @param {OauthCodeRequest} oauthCodeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postOauthCode(oauthCodeRequest: OauthCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postOauthCode(oauthCodeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OAuthApi - factory interface
 * @export
 */
export const OAuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OAuthApiFp(configuration)
    return {
        /**
         * OAuth認可用のコールバックURLを取得します。   ※ クッキーを利用してセッション管理を行います。 
         * @summary OAuthのコールバックURLを取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOauthCallback(options?: any): AxiosPromise<OauthCallbackResponse> {
            return localVarFp.getOauthCallback(options).then((request) => request(axios, basePath));
        },
        /**
         * 入手したOAuthコードを送信してログインします。   送信されたコードから入手したアクセストークンはサーバーに保存されます。 
         * @summary OAuthコードを送信してログイン
         * @param {OauthCodeRequest} oauthCodeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOauthCode(oauthCodeRequest: OauthCodeRequest, options?: any): AxiosPromise<void> {
            return localVarFp.postOauthCode(oauthCodeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OAuthApi - object-oriented interface
 * @export
 * @class OAuthApi
 * @extends {BaseAPI}
 */
export class OAuthApi extends BaseAPI {
    /**
     * OAuth認可用のコールバックURLを取得します。   ※ クッキーを利用してセッション管理を行います。 
     * @summary OAuthのコールバックURLを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApi
     */
    public getOauthCallback(options?: AxiosRequestConfig) {
        return OAuthApiFp(this.configuration).getOauthCallback(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 入手したOAuthコードを送信してログインします。   送信されたコードから入手したアクセストークンはサーバーに保存されます。 
     * @summary OAuthコードを送信してログイン
     * @param {OauthCodeRequest} oauthCodeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApi
     */
    public postOauthCode(oauthCodeRequest: OauthCodeRequest, options?: AxiosRequestConfig) {
        return OAuthApiFp(this.configuration).postOauthCode(oauthCodeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SubmissionsApi - axios parameter creator
 * @export
 */
export const SubmissionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * コンペティションへの自チームの提出一覧を取得します。 
         * @summary コンペティションへの自チームの提出一覧
         * @param {string} competitionId コンペティションのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyTeamSubmissions: async (competitionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'competitionId' is not null or undefined
            assertParamExists('getMyTeamSubmissions', 'competitionId', competitionId)
            const localVarPath = `/competitions/{competitionId}/submissions`
                .replace(`{${"competitionId"}}`, encodeURIComponent(String(competitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 提出の詳細を取得します。 
         * @summary 提出の詳細を取得
         * @param {number} submissionId サブミッションのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmission: async (submissionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'submissionId' is not null or undefined
            assertParamExists('getSubmission', 'submissionId', submissionId)
            const localVarPath = `/submissions/{submissionId}`
                .replace(`{${"submissionId"}}`, encodeURIComponent(String(submissionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 提出のコメントを変更します。 
         * @summary 提出のコメントを変更
         * @param {number} submissionId サブミッションのID
         * @param {PatchSubmissionRequest} [patchSubmissionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSubmission: async (submissionId: number, patchSubmissionRequest?: PatchSubmissionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'submissionId' is not null or undefined
            assertParamExists('patchSubmission', 'submissionId', submissionId)
            const localVarPath = `/submissions/{submissionId}`
                .replace(`{${"submissionId"}}`, encodeURIComponent(String(submissionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchSubmissionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * コンペティションへの解答提出を行います。 
         * @summary コンペティションへの解答提出
         * @param {string} competitionId コンペティションのID
         * @param {string} file 提出データ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSubmissions: async (competitionId: string, file: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'competitionId' is not null or undefined
            assertParamExists('postSubmissions', 'competitionId', competitionId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('postSubmissions', 'file', file)
            const localVarPath = `/competitions/{competitionId}/submissions`
                .replace(`{${"competitionId"}}`, encodeURIComponent(String(competitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication cookieAuth required


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubmissionsApi - functional programming interface
 * @export
 */
export const SubmissionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubmissionsApiAxiosParamCreator(configuration)
    return {
        /**
         * コンペティションへの自チームの提出一覧を取得します。 
         * @summary コンペティションへの自チームの提出一覧
         * @param {string} competitionId コンペティションのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyTeamSubmissions(competitionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Submission>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyTeamSubmissions(competitionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 提出の詳細を取得します。 
         * @summary 提出の詳細を取得
         * @param {number} submissionId サブミッションのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubmission(submissionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Submission>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubmission(submissionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 提出のコメントを変更します。 
         * @summary 提出のコメントを変更
         * @param {number} submissionId サブミッションのID
         * @param {PatchSubmissionRequest} [patchSubmissionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchSubmission(submissionId: number, patchSubmissionRequest?: PatchSubmissionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchSubmission(submissionId, patchSubmissionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * コンペティションへの解答提出を行います。 
         * @summary コンペティションへの解答提出
         * @param {string} competitionId コンペティションのID
         * @param {string} file 提出データ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSubmissions(competitionId: string, file: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Submission>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSubmissions(competitionId, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SubmissionsApi - factory interface
 * @export
 */
export const SubmissionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubmissionsApiFp(configuration)
    return {
        /**
         * コンペティションへの自チームの提出一覧を取得します。 
         * @summary コンペティションへの自チームの提出一覧
         * @param {string} competitionId コンペティションのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyTeamSubmissions(competitionId: string, options?: any): AxiosPromise<Array<Submission>> {
            return localVarFp.getMyTeamSubmissions(competitionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 提出の詳細を取得します。 
         * @summary 提出の詳細を取得
         * @param {number} submissionId サブミッションのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmission(submissionId: number, options?: any): AxiosPromise<Submission> {
            return localVarFp.getSubmission(submissionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 提出のコメントを変更します。 
         * @summary 提出のコメントを変更
         * @param {number} submissionId サブミッションのID
         * @param {PatchSubmissionRequest} [patchSubmissionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchSubmission(submissionId: number, patchSubmissionRequest?: PatchSubmissionRequest, options?: any): AxiosPromise<void> {
            return localVarFp.patchSubmission(submissionId, patchSubmissionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * コンペティションへの解答提出を行います。 
         * @summary コンペティションへの解答提出
         * @param {string} competitionId コンペティションのID
         * @param {string} file 提出データ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSubmissions(competitionId: string, file: string, options?: any): AxiosPromise<Submission> {
            return localVarFp.postSubmissions(competitionId, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubmissionsApi - object-oriented interface
 * @export
 * @class SubmissionsApi
 * @extends {BaseAPI}
 */
export class SubmissionsApi extends BaseAPI {
    /**
     * コンペティションへの自チームの提出一覧を取得します。 
     * @summary コンペティションへの自チームの提出一覧
     * @param {string} competitionId コンペティションのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionsApi
     */
    public getMyTeamSubmissions(competitionId: string, options?: AxiosRequestConfig) {
        return SubmissionsApiFp(this.configuration).getMyTeamSubmissions(competitionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 提出の詳細を取得します。 
     * @summary 提出の詳細を取得
     * @param {number} submissionId サブミッションのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionsApi
     */
    public getSubmission(submissionId: number, options?: AxiosRequestConfig) {
        return SubmissionsApiFp(this.configuration).getSubmission(submissionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 提出のコメントを変更します。 
     * @summary 提出のコメントを変更
     * @param {number} submissionId サブミッションのID
     * @param {PatchSubmissionRequest} [patchSubmissionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionsApi
     */
    public patchSubmission(submissionId: number, patchSubmissionRequest?: PatchSubmissionRequest, options?: AxiosRequestConfig) {
        return SubmissionsApiFp(this.configuration).patchSubmission(submissionId, patchSubmissionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * コンペティションへの解答提出を行います。 
     * @summary コンペティションへの解答提出
     * @param {string} competitionId コンペティションのID
     * @param {string} file 提出データ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionsApi
     */
    public postSubmissions(competitionId: string, file: string, options?: AxiosRequestConfig) {
        return SubmissionsApiFp(this.configuration).postSubmissions(competitionId, file, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TeamsApi - axios parameter creator
 * @export
 */
export const TeamsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * コンペティションに参加しているチームの一覧を取得します。 
         * @summary コンペティションの参加チームの一覧を取得
         * @param {string} competitionId コンペティションのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompetitionTeams: async (competitionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'competitionId' is not null or undefined
            assertParamExists('getCompetitionTeams', 'competitionId', competitionId)
            const localVarPath = `/competitions/{competitionId}/teams`
                .replace(`{${"competitionId"}}`, encodeURIComponent(String(competitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定のコンペティションでの自分の所属チームを取得します。 
         * @summary 指定のコンペティションでの自分の所属チームを取得
         * @param {string} competitionId コンペティションのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyTeamInCompetition: async (competitionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'competitionId' is not null or undefined
            assertParamExists('getMyTeamInCompetition', 'competitionId', competitionId)
            const localVarPath = `/teams/me/{competitionId}`
                .replace(`{${"competitionId"}}`, encodeURIComponent(String(competitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 全コンペティションでの自分が所属しているチームの一覧を取得します。 
         * @summary 自分が所属しているチームの一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyTeams: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/teams/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * チームの詳細を取得します。 
         * @summary チームの詳細を取得
         * @param {string} teamId チームのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeam: async (teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getTeam', 'teamId', teamId)
            const localVarPath = `/teams/{teamId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * チームのマージリクエスト情報を取得します。 
         * @summary チームのマージリクエスト情報を取得
         * @param {string} teamId チームのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamMergeStatus: async (teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getTeamMergeStatus', 'teamId', teamId)
            const localVarPath = `/teams/{teamId}/merge`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * チームの情報を変更します。 
         * @summary チームの情報を変更
         * @param {string} teamId チームのID
         * @param {PatchTeamRequest} [patchTeamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchTeam: async (teamId: string, patchTeamRequest?: PatchTeamRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('patchTeam', 'teamId', teamId)
            const localVarPath = `/teams/{teamId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchTeamRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * コンペティションへの参加登録を行います。 
         * @summary コンペティションへの参加登録
         * @param {string} competitionId コンペティションのID
         * @param {PostCompetitionTeamsRequest} [postCompetitionTeamsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCompetitionTeams: async (competitionId: string, postCompetitionTeamsRequest?: PostCompetitionTeamsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'competitionId' is not null or undefined
            assertParamExists('postCompetitionTeams', 'competitionId', competitionId)
            const localVarPath = `/competitions/{competitionId}/teams`
                .replace(`{${"competitionId"}}`, encodeURIComponent(String(competitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postCompetitionTeamsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * チーム同士ののマージをリクエストします。 
         * @summary チームのマージをリクエストする
         * @param {PostTeamMergeRequest} [postTeamMergeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeamMerge: async (postTeamMergeRequest?: PostTeamMergeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/teams/merge`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postTeamMergeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamsApi - functional programming interface
 * @export
 */
export const TeamsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeamsApiAxiosParamCreator(configuration)
    return {
        /**
         * コンペティションに参加しているチームの一覧を取得します。 
         * @summary コンペティションの参加チームの一覧を取得
         * @param {string} competitionId コンペティションのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompetitionTeams(competitionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TeamCoreInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompetitionTeams(competitionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定のコンペティションでの自分の所属チームを取得します。 
         * @summary 指定のコンペティションでの自分の所属チームを取得
         * @param {string} competitionId コンペティションのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyTeamInCompetition(competitionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamCoreInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyTeamInCompetition(competitionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 全コンペティションでの自分が所属しているチームの一覧を取得します。 
         * @summary 自分が所属しているチームの一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyTeams(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TeamCoreInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyTeams(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * チームの詳細を取得します。 
         * @summary チームの詳細を取得
         * @param {string} teamId チームのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeam(teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeam(teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * チームのマージリクエスト情報を取得します。 
         * @summary チームのマージリクエスト情報を取得
         * @param {string} teamId チームのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeamMergeStatus(teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTeamMergeStatus200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeamMergeStatus(teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * チームの情報を変更します。 
         * @summary チームの情報を変更
         * @param {string} teamId チームのID
         * @param {PatchTeamRequest} [patchTeamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchTeam(teamId: string, patchTeamRequest?: PatchTeamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchTeam(teamId, patchTeamRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * コンペティションへの参加登録を行います。 
         * @summary コンペティションへの参加登録
         * @param {string} competitionId コンペティションのID
         * @param {PostCompetitionTeamsRequest} [postCompetitionTeamsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCompetitionTeams(competitionId: string, postCompetitionTeamsRequest?: PostCompetitionTeamsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCompetitionTeams(competitionId, postCompetitionTeamsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * チーム同士ののマージをリクエストします。 
         * @summary チームのマージをリクエストする
         * @param {PostTeamMergeRequest} [postTeamMergeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTeamMerge(postTeamMergeRequest?: PostTeamMergeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MergeRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTeamMerge(postTeamMergeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TeamsApi - factory interface
 * @export
 */
export const TeamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeamsApiFp(configuration)
    return {
        /**
         * コンペティションに参加しているチームの一覧を取得します。 
         * @summary コンペティションの参加チームの一覧を取得
         * @param {string} competitionId コンペティションのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompetitionTeams(competitionId: string, options?: any): AxiosPromise<Array<TeamCoreInfo>> {
            return localVarFp.getCompetitionTeams(competitionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定のコンペティションでの自分の所属チームを取得します。 
         * @summary 指定のコンペティションでの自分の所属チームを取得
         * @param {string} competitionId コンペティションのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyTeamInCompetition(competitionId: string, options?: any): AxiosPromise<TeamCoreInfo> {
            return localVarFp.getMyTeamInCompetition(competitionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 全コンペティションでの自分が所属しているチームの一覧を取得します。 
         * @summary 自分が所属しているチームの一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyTeams(options?: any): AxiosPromise<Array<TeamCoreInfo>> {
            return localVarFp.getMyTeams(options).then((request) => request(axios, basePath));
        },
        /**
         * チームの詳細を取得します。 
         * @summary チームの詳細を取得
         * @param {string} teamId チームのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeam(teamId: string, options?: any): AxiosPromise<Team> {
            return localVarFp.getTeam(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * チームのマージリクエスト情報を取得します。 
         * @summary チームのマージリクエスト情報を取得
         * @param {string} teamId チームのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamMergeStatus(teamId: string, options?: any): AxiosPromise<GetTeamMergeStatus200Response> {
            return localVarFp.getTeamMergeStatus(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * チームの情報を変更します。 
         * @summary チームの情報を変更
         * @param {string} teamId チームのID
         * @param {PatchTeamRequest} [patchTeamRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchTeam(teamId: string, patchTeamRequest?: PatchTeamRequest, options?: any): AxiosPromise<void> {
            return localVarFp.patchTeam(teamId, patchTeamRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * コンペティションへの参加登録を行います。 
         * @summary コンペティションへの参加登録
         * @param {string} competitionId コンペティションのID
         * @param {PostCompetitionTeamsRequest} [postCompetitionTeamsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCompetitionTeams(competitionId: string, postCompetitionTeamsRequest?: PostCompetitionTeamsRequest, options?: any): AxiosPromise<Team> {
            return localVarFp.postCompetitionTeams(competitionId, postCompetitionTeamsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * チーム同士ののマージをリクエストします。 
         * @summary チームのマージをリクエストする
         * @param {PostTeamMergeRequest} [postTeamMergeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeamMerge(postTeamMergeRequest?: PostTeamMergeRequest, options?: any): AxiosPromise<MergeRequest> {
            return localVarFp.postTeamMerge(postTeamMergeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeamsApi - object-oriented interface
 * @export
 * @class TeamsApi
 * @extends {BaseAPI}
 */
export class TeamsApi extends BaseAPI {
    /**
     * コンペティションに参加しているチームの一覧を取得します。 
     * @summary コンペティションの参加チームの一覧を取得
     * @param {string} competitionId コンペティションのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getCompetitionTeams(competitionId: string, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getCompetitionTeams(competitionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定のコンペティションでの自分の所属チームを取得します。 
     * @summary 指定のコンペティションでの自分の所属チームを取得
     * @param {string} competitionId コンペティションのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getMyTeamInCompetition(competitionId: string, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getMyTeamInCompetition(competitionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 全コンペティションでの自分が所属しているチームの一覧を取得します。 
     * @summary 自分が所属しているチームの一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getMyTeams(options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getMyTeams(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * チームの詳細を取得します。 
     * @summary チームの詳細を取得
     * @param {string} teamId チームのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getTeam(teamId: string, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getTeam(teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * チームのマージリクエスト情報を取得します。 
     * @summary チームのマージリクエスト情報を取得
     * @param {string} teamId チームのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getTeamMergeStatus(teamId: string, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getTeamMergeStatus(teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * チームの情報を変更します。 
     * @summary チームの情報を変更
     * @param {string} teamId チームのID
     * @param {PatchTeamRequest} [patchTeamRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public patchTeam(teamId: string, patchTeamRequest?: PatchTeamRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).patchTeam(teamId, patchTeamRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * コンペティションへの参加登録を行います。 
     * @summary コンペティションへの参加登録
     * @param {string} competitionId コンペティションのID
     * @param {PostCompetitionTeamsRequest} [postCompetitionTeamsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public postCompetitionTeams(competitionId: string, postCompetitionTeamsRequest?: PostCompetitionTeamsRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).postCompetitionTeams(competitionId, postCompetitionTeamsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * チーム同士ののマージをリクエストします。 
     * @summary チームのマージをリクエストする
     * @param {PostTeamMergeRequest} [postTeamMergeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public postTeamMerge(postTeamMergeRequest?: PostTeamMergeRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).postTeamMerge(postTeamMergeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 自分のユーザー情報の取得を行います。   ログイン済みかの確認用としても使います。 
         * @summary 自分のユーザー情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMe: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 自分のユーザー情報の取得を行います。   ログイン済みかの確認用としても使います。 
         * @summary 自分のユーザー情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMe(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMe(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 自分のユーザー情報の取得を行います。   ログイン済みかの確認用としても使います。 
         * @summary 自分のユーザー情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMe(options?: any): AxiosPromise<User> {
            return localVarFp.getMe(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 自分のユーザー情報の取得を行います。   ログイン済みかの確認用としても使います。 
     * @summary 自分のユーザー情報を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getMe(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getMe(options).then((request) => request(this.axios, this.basePath));
    }
}

export class Apis extends BaseAPI {
    /**
     * コンペティションの詳細を取得します。 
     * @summary コンペティションの詳細を取得
     * @param {string} competitionId コンペティションのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public getCompetition(competitionId: string, options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).getCompetition(competitionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * コンペティションに参加しているチームの一覧を取得します。 
     * @summary コンペティションの参加チームの一覧を取得
     * @param {string} competitionId コンペティションのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getCompetitionTeams(competitionId: string, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getCompetitionTeams(competitionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * コンペティションの一覧を取得します。 
     * @summary コンペティションの一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public getCompetitions(options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).getCompetitions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * コンペティションのリーダーボードを取得します。 
     * @summary コンペティションのリーダーボードの取得
     * @param {string} competitionId コンペティションのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public getLeaderBoard(competitionId: string, options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).getLeaderBoard(competitionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定のコンペティションでの自分の所属チームを取得します。 
     * @summary 指定のコンペティションでの自分の所属チームを取得
     * @param {string} competitionId コンペティションのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getMyTeamInCompetition(competitionId: string, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getMyTeamInCompetition(competitionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * コンペティションへの自チームの提出一覧を取得します。 
     * @summary コンペティションへの自チームの提出一覧
     * @param {string} competitionId コンペティションのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionsApi
     */
    public getMyTeamSubmissions(competitionId: string, options?: AxiosRequestConfig) {
        return SubmissionsApiFp(this.configuration).getMyTeamSubmissions(competitionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * コンペティションへの参加登録を行います。 
     * @summary コンペティションへの参加登録
     * @param {string} competitionId コンペティションのID
     * @param {PostCompetitionTeamsRequest} [postCompetitionTeamsRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public postCompetitionTeams(competitionId: string, postCompetitionTeamsRequest?: PostCompetitionTeamsRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).postCompetitionTeams(competitionId, postCompetitionTeamsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * コンペティションへの解答提出を行います。 
     * @summary コンペティションへの解答提出
     * @param {string} competitionId コンペティションのID
     * @param {string} file 提出データ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionsApi
     */
    public postSubmissions(competitionId: string, file: string, options?: AxiosRequestConfig) {
        return SubmissionsApiFp(this.configuration).postSubmissions(competitionId, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * pingを飛ばします。
     * @summary pingを飛ばす
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    public getPing(options?: AxiosRequestConfig) {
        return GeneralApiFp(this.configuration).getPing(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * OAuth認可用のコールバックURLを取得します。   ※ クッキーを利用してセッション管理を行います。 
     * @summary OAuthのコールバックURLを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApi
     */
    public getOauthCallback(options?: AxiosRequestConfig) {
        return OAuthApiFp(this.configuration).getOauthCallback(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 入手したOAuthコードを送信してログインします。   送信されたコードから入手したアクセストークンはサーバーに保存されます。 
     * @summary OAuthコードを送信してログイン
     * @param {OauthCodeRequest} oauthCodeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApi
     */
    public postOauthCode(oauthCodeRequest: OauthCodeRequest, options?: AxiosRequestConfig) {
        return OAuthApiFp(this.configuration).postOauthCode(oauthCodeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 提出の詳細を取得します。 
     * @summary 提出の詳細を取得
     * @param {number} submissionId サブミッションのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionsApi
     */
    public getSubmission(submissionId: number, options?: AxiosRequestConfig) {
        return SubmissionsApiFp(this.configuration).getSubmission(submissionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 提出のコメントを変更します。 
     * @summary 提出のコメントを変更
     * @param {number} submissionId サブミッションのID
     * @param {PatchSubmissionRequest} [patchSubmissionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionsApi
     */
    public patchSubmission(submissionId: number, patchSubmissionRequest?: PatchSubmissionRequest, options?: AxiosRequestConfig) {
        return SubmissionsApiFp(this.configuration).patchSubmission(submissionId, patchSubmissionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 全コンペティションでの自分が所属しているチームの一覧を取得します。 
     * @summary 自分が所属しているチームの一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getMyTeams(options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getMyTeams(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * チームの詳細を取得します。 
     * @summary チームの詳細を取得
     * @param {string} teamId チームのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getTeam(teamId: string, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getTeam(teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * チームのマージリクエスト情報を取得します。 
     * @summary チームのマージリクエスト情報を取得
     * @param {string} teamId チームのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getTeamMergeStatus(teamId: string, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getTeamMergeStatus(teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * チームの情報を変更します。 
     * @summary チームの情報を変更
     * @param {string} teamId チームのID
     * @param {PatchTeamRequest} [patchTeamRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public patchTeam(teamId: string, patchTeamRequest?: PatchTeamRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).patchTeam(teamId, patchTeamRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * チーム同士ののマージをリクエストします。 
     * @summary チームのマージをリクエストする
     * @param {PostTeamMergeRequest} [postTeamMergeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public postTeamMerge(postTeamMergeRequest?: PostTeamMergeRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).postTeamMerge(postTeamMergeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 自分のユーザー情報の取得を行います。   ログイン済みかの確認用としても使います。 
     * @summary 自分のユーザー情報を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getMe(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getMe(options).then((request) => request(this.axios, this.basePath));
    }
}

export class Apis extends BaseAPI {
    /**
     * コンペティションの詳細を取得します。 
     * @summary コンペティションの詳細を取得
     * @param {string} competitionId コンペティションのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public getCompetition(competitionId: string, options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).getCompetition(competitionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * コンペティションに参加しているチームの一覧を取得します。 
     * @summary コンペティションの参加チームの一覧を取得
     * @param {string} competitionId コンペティションのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getCompetitionTeams(competitionId: string, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getCompetitionTeams(competitionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * コンペティションの一覧を取得します。 
     * @summary コンペティションの一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public getCompetitions(options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).getCompetitions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * コンペティションのリーダーボードを取得します。 
     * @summary コンペティションのリーダーボードの取得
     * @param {string} competitionId コンペティションのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    public getLeaderBoard(competitionId: string, options?: AxiosRequestConfig) {
        return CompetitionsApiFp(this.configuration).getLeaderBoard(competitionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定のコンペティションでの自分の所属チームを取得します。 
     * @summary 指定のコンペティションでの自分の所属チームを取得
     * @param {string} competitionId コンペティションのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getMyTeamInCompetition(competitionId: string, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getMyTeamInCompetition(competitionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * コンペティションへの自チームの提出一覧を取得します。 
     * @summary コンペティションへの自チームの提出一覧
     * @param {string} competitionId コンペティションのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionsApi
     */
    public getMyTeamSubmissions(competitionId: string, options?: AxiosRequestConfig) {
        return SubmissionsApiFp(this.configuration).getMyTeamSubmissions(competitionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * コンペティションへの参加登録を行います。 
     * @summary コンペティションへの参加登録
     * @param {string} competitionId コンペティションのID
     * @param {PostCompetitionTeamsRequest} [postCompetitionTeamsRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public postCompetitionTeams(competitionId: string, postCompetitionTeamsRequest?: PostCompetitionTeamsRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).postCompetitionTeams(competitionId, postCompetitionTeamsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * コンペティションへの解答提出を行います。 
     * @summary コンペティションへの解答提出
     * @param {string} competitionId コンペティションのID
     * @param {string} file 提出データ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionsApi
     */
    public postSubmissions(competitionId: string, file: string, options?: AxiosRequestConfig) {
        return SubmissionsApiFp(this.configuration).postSubmissions(competitionId, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * pingを飛ばします。
     * @summary pingを飛ばす
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    public getPing(options?: AxiosRequestConfig) {
        return GeneralApiFp(this.configuration).getPing(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * OAuth認可用のコールバックURLを取得します。   ※ クッキーを利用してセッション管理を行います。 
     * @summary OAuthのコールバックURLを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApi
     */
    public getOauthCallback(options?: AxiosRequestConfig) {
        return OAuthApiFp(this.configuration).getOauthCallback(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 入手したOAuthコードを送信してログインします。   送信されたコードから入手したアクセストークンはサーバーに保存されます。 
     * @summary OAuthコードを送信してログイン
     * @param {OauthCodeRequest} oauthCodeRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthApi
     */
    public postOauthCode(oauthCodeRequest: OauthCodeRequest, options?: AxiosRequestConfig) {
        return OAuthApiFp(this.configuration).postOauthCode(oauthCodeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 提出の詳細を取得します。 
     * @summary 提出の詳細を取得
     * @param {number} submissionId サブミッションのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionsApi
     */
    public getSubmission(submissionId: number, options?: AxiosRequestConfig) {
        return SubmissionsApiFp(this.configuration).getSubmission(submissionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 提出のコメントを変更します。 
     * @summary 提出のコメントを変更
     * @param {number} submissionId サブミッションのID
     * @param {PatchSubmissionRequest} [patchSubmissionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionsApi
     */
    public patchSubmission(submissionId: number, patchSubmissionRequest?: PatchSubmissionRequest, options?: AxiosRequestConfig) {
        return SubmissionsApiFp(this.configuration).patchSubmission(submissionId, patchSubmissionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 全コンペティションでの自分が所属しているチームの一覧を取得します。 
     * @summary 自分が所属しているチームの一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getMyTeams(options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getMyTeams(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * チームの詳細を取得します。 
     * @summary チームの詳細を取得
     * @param {string} teamId チームのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getTeam(teamId: string, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getTeam(teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * チームのマージリクエスト情報を取得します。 
     * @summary チームのマージリクエスト情報を取得
     * @param {string} teamId チームのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getTeamMergeStatus(teamId: string, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getTeamMergeStatus(teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * チームの情報を変更します。 
     * @summary チームの情報を変更
     * @param {string} teamId チームのID
     * @param {PatchTeamRequest} [patchTeamRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public patchTeam(teamId: string, patchTeamRequest?: PatchTeamRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).patchTeam(teamId, patchTeamRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * チーム同士ののマージをリクエストします。 
     * @summary チームのマージをリクエストする
     * @param {PostTeamMergeRequest} [postTeamMergeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public postTeamMerge(postTeamMergeRequest?: PostTeamMergeRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).postTeamMerge(postTeamMergeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 自分のユーザー情報の取得を行います。   ログイン済みかの確認用としても使います。 
     * @summary 自分のユーザー情報を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getMe(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getMe(options).then((request) => request(this.axios, this.basePath));
    }
}
